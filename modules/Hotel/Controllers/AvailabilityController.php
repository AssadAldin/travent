<?php
namespace Modules\Hotel\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Modules\FrontendController;
use Modules\Hotel\Models\Hotel;
use Modules\Booking\Models\Booking;
use Modules\Hotel\Models\HotelRoom;
use Illuminate\Support\Facades\Auth;
use Modules\Hotel\Models\HotelRoomDate;
use Modules\Hotel\Models\HotelRoomBooking;
use ICal\ICal;

class AvailabilityController extends FrontendController
{

    protected $roomClass;
    /**
     * @var HotelRoomDate
     */
    protected $roomDateClass;

    /**
     * @var Booking
     */
    protected $bookingClass;
    protected $hotelClass;
    protected $currentHotel;
    protected $roomBookingClass;

    protected $indexView = 'Hotel::frontend.user.availability';

    public function __construct()
    {
        parent::__construct();
        $this->roomClass = HotelRoom::class;
        $this->roomDateClass = HotelRoomDate::class;
        $this->bookingClass = Booking::class;
        $this->hotelClass = Hotel::class;
        $this->roomBookingClass = HotelRoomBooking::class;
    }
    public function callAction($method, $parameters)
    {
        if (!Hotel::isEnable()) {
            return redirect('/');
        }
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }

    protected function hasHotelPermission($hotel_id = false)
    {
        if (empty($hotel_id))
            return false;

        $hotel = $this->hotelClass::find($hotel_id);
        if (empty($hotel))
            return false;

        if (!$this->hasPermission('hotel_update') and $hotel->author_id != Auth::id()) {
            return false;
        }

        $this->currentHotel = $hotel;
        return true;
    }

    public function index(Request $request, $hotel_id)
    {

        $this->checkPermission('hotel_create');

        if (!$this->hasHotelPermission($hotel_id)) {
            abort(403);
        }

        $q = $this->roomClass::query();

        if ($request->query('s')) {
            $q->where('title', 'like', '%' . $request->query('s') . '%');
        }

        $q->orderBy('id', 'desc');
        $q->where('parent_id', $hotel_id);

        $rows = $q->paginate(15);

        $current_month = strtotime(date('Y-m-01', time()));

        if ($request->query('month')) {
            $date = date_create_from_format('m-Y', $request->query('month'));
            if (!$date) {
                $current_month = time();
            } else {
                $current_month = $date->getTimestamp();
            }
        }
        $breadcrumbs = [
            [
                'name' => __('Hotels'),
                'url' => route('hotel.vendor.index')
            ],
            [
                'name' => __('Hotel: :name', ['name' => $this->currentHotel->title]),
                'url' => route('hotel.vendor.edit', [$this->currentHotel->id])
            ],
            [
                'name' => __('Availability'),
                'class' => 'active'
            ],
        ];
        $hotel = $this->currentHotel;
        $page_title = __('Room Availability');

        return view($this->indexView, compact('rows', 'breadcrumbs', 'current_month', 'page_title', 'request', 'hotel'));
    }

    public function all_availability_user(Request $request)
    {
        $this->checkPermission('hotel_create');

        $q = $this->hotelClass::query();

        if ($request->query('s')) {
            $q->where('title', 'like', '%' . $request->query('s') . '%');
        }

        // if (!$this->hasPermission('hotel_manage_others')) {
        //     $q->where('create_user', $this->currentUser()->id);
        // }
        // $q->where('status', 'publish');
        $q->where('author_id', Auth::user()->id);
        $q->orderBy('bravo_hotels.id', 'desc');

        $rows = $q->paginate(10);

        $current_month = strtotime(date('Y-m-01', time()));

        if ($request->query('month')) {
            $date = date_create_from_format('m-Y', $request->query('month'));
            if (!$date) {
                $current_month = time();
            } else {
                $current_month = $date->getTimestamp();
            }
        }
        $breadcrumbs = [
            [
                'name' => __('hotels'),
                'url' => route('hotel.vendor.index')
            ],
            [
                'name' => __('Availability'),
                'class' => 'active'
            ],
        ];
        $page_title = __('hotels Availability');
        return view('Hotel::frontend.user.all_availability_user', compact('rows', 'breadcrumbs', 'current_month', 'page_title', 'request'));
    }

    public function loadDates(Request $request, $hotel_id)
    {
        $request->validate([
            'id' => 'required',
            'start' => 'required',
            'end' => 'required',
        ]);

        if (!$this->hasHotelPermission($hotel_id)) {
            return $this->sendError(__("Hotel not found"));
        }
        /**
         * @var $room HotelRoom
         */

        $room = $this->roomClass::find($request->query('id'));
        if (empty($room)) {
            return $this->sendError(__('room not found'));
        }
        $hotel = Hotel::find($hotel_id);
        $is_single = $request->query('for_single');
        $query = $this->roomDateClass::query();
        $query->where('target_id', $request->query('id'));
        $query->where('start_date', '>=', date('Y-m-d H:i:s', strtotime($request->query('start'))));
        $query->where('end_date', '<=', date('Y-m-d H:i:s', strtotime($request->query('end'))));

        $rows = $query->take(100)->get();
        $allDates = [];

        $period = periodDate($request->input('start'), $request->input('end'), false);
        foreach ($period as $dt) {
            $date = [
                'id' => rand(0, 999),
                'active' => 0,
                'price' => $room->price * 1,
                'price2' => $room->price2 * 1,
                'weekendsPrice' => $room->weekendsPrice * 1,
                'weekendsPrice2' => $room->weekendsPrice2 * 1,
                'weekends' => false,
                'full_day' => $room->full_day,
                'day_stay' => $room->day_stay,
                'bg' => 'green',
                'number' => $room->number,
                'is_instant' => 1,
                'is_default' => true,
                'textColor' => '#2791fe',
            ];
            $date['price_html'] = $date['price2'];
            if (!$is_single) {
                $date['price_html2'] = $date['price2'];
            }
            if (!$is_single) {
                $date['price_html'] = $date['price'];
            }
            $date['price_html2'] = format_money_main($date['price2']);
            $date['title'] = $date['event'] = $date['price'];
            $date['title2'] = $date['event2'] = $date['price2'];
            $date['start'] = $date['end'] = $dt->format('Y-m-d');
            $day_index = date("w", strtotime($date['start']));
            if (str_contains($hotel->weekends_days, $day_index)) {
                $date['title'] = $room->weekendsPrice * 1;
                $date['title2'] = $room->weekendsPrice2 * 1;
                $date['weekends'] = true;
            }
            $date['active'] = 1;
            $allDates[$dt->format('Y-m-d')] = $date;
        }
        if (!empty($rows)) {
            foreach ($rows as $row) {
                $row->start = date('Y-m-d', strtotime($row->start_date));
                $row->end = date('Y-m-d', strtotime($row->start_date));
                $row->textColor = '#2791fe';
                $price2 = $row->price2 * 1;
                $price = $row->price * 1;
                $weekendsPrice = $row->weekendsPrice * 1;
                $weekendsPrice2 = $row->weekendsPrice2 * 1;
                if (empty($price)) {
                    $row->price = $room->price * 1;
                }
                if (empty($price2)) {
                    $row->price2 = $room->price2 * 1;
                }
                $row->title = $row->event = $price;
                $row->title2 = $row->event2 = $price2;
                $row->full_day = $row->full_day = $room->full_day;
                $row->day_stay = $row->day_stay = $room->day_stay;
                $row->weekendsPrice = $row->weekendsPrice = $room->weekendsPrice;
                $row->weekendsPrice2 = $row->weekendsPrice2 = $room->weekendsPrice2;
                $row->bg = "darkGreen";
                if (!$is_single) {
                    $row->title = $row->event = $price;
                }
                $row->price = $price * 1;
                $row->price2 = $price2 * 1;
                $row->weekendsPrice = $weekendsPrice * 1;
                $row->weekendsPrice2 = $weekendsPrice2 * 1;
                $day_index = date("w", strtotime($row->start_date));
                if (str_contains($hotel->weekends_days, $day_index)) {
                    $row->weekends = true;
                } else {
                    $row->weekends = false;
                }
                $day_index = date("w", strtotime($row->start_date));
                if (str_contains($hotel->weekends_days, $day_index)) {
                    $row->title = $row->weekendsPrice * 1;
                    $row->title2 = $row->weekendsPrice2 * 1;
                }

                if (!$row->active) {
                    $row->title = $row->event = 'Blocked';
                    $row->title2 = $row->event = 'Blocked';
                    $row->price = $price * 1;
                    $row->price2 = $price2 * 1;
                    $row->full_day = $row->full_day = $room->full_day;
                    $row->day_stay = $row->day_stay = $room->day_stay;
                    $row->backgroundColor = '#fe2727';
                    $row->bg = 'gray';
                    $row->classNames = ['blocked-event'];
                    $row->textColor = '#fe2727';
                    $row->active = 0;

                } else {
                    $row->classNames = ['active-event'];
                    $row->active = 1;
                    $row->price = $price * 1;
                    $row->price2 = $price2 * 1;
                    if ($row->is_instant) {
                        //    $row->title = '<i class="fa fa-bolt"></i> '.$row->title;
                    }
                    $day_index = date("w", strtotime($row->start_date));
                    if (str_contains($hotel->weekends_days, $day_index)) {
                        $row->title = $row->weekendsPrice * 1;
                        $row->title2 = $row->weekendsPrice2 * 1;
                    }
                }
                $allDates[date('Y-m-d', strtotime($row->start_date))] = $row->toArray();
            }
        }
        $bookings = $room->getBookingsInRange($request->query('start'), $request->query('end'));
        if (!empty($bookings)) {
            foreach ($bookings as $booking) {
                $period = periodDate($booking->start_date, $booking->end_date, false);
                $guest = User::find($booking->create_user);
                foreach ($period as $dt) {
                    $date = $dt->format('Y-m-d');
                    if (isset($allDates[$date])) {
                        $allDates[$date]['number'] -= $booking->number;
                        $allDates[$date]['event'] = $allDates[$date]['title'] = format_money_main($allDates[$date]['price']) . ' x ' . $allDates[$date]['number'];
                        if ($allDates[$date]['number'] <= 0) {
                            $allDates[$date]['active'] = 0;
                            $allDates[$date]['event'] = __('Booked');
                            $allDates[$date]['event2'] = null;
                            $allDates[$date]['price'] = 'Booked';
                            $allDates[$date]['price2'] = 'Booked';
                            $allDates[$date]['title'] = 'Booked';
                            $allDates[$date]['title2'] = 'Booked';
                            $allDates[$date]['full_day'] = $room->full_day;
                            $allDates[$date]['day_stay'] = $room->day_stay;
                            $allDates[$date]['bg'] = 'orange';
                            $allDates[$date]['booking'] = $booking->create_user;
                            $allDates[$date]['classNames'] = ['full-book-event'];
                        }
                    }
                }
            }
        }
        $data = array_values($allDates);

        return response()->json($data);
    }

    public function loadDatesAll(Request $request)
    {
        $request->validate([
            'id' => 'required',
            'start' => 'required',
            'end' => 'required',
        ]);

        // if (!$this->hasHotelPermission($hotel_id)) {
        //     return $this->sendError(__("Hotel not found"));
        // }
        /**
         * @var $room HotelRoom
         */

        $room = $this->roomClass::find($request->query('id'));
        if (empty($room)) {
            return $this->sendError(__('room not found'));
        }
        $is_single = $request->query('for_single');
        $query = $this->roomDateClass::query();
        $hotel = $room->hotel;
        $query->where('target_id', $request->query('id'));
        $query->where('start_date', '>=', date('Y-m-d H:i:s', strtotime($request->query('start'))));
        $query->where('end_date', '<=', date('Y-m-d H:i:s', strtotime($request->query('end'))));

        $rows = $query->take(100)->get();
        $allDates = [];

        $period = periodDate($request->input('start'), $request->input('end'), false);
        foreach ($period as $dt) {
            $date = [
                'id' => rand(0, 999),
                'active' => 0,
                'price' => $room->price * 1,
                'price2' => $room->price2 * 1,
                'weekendsPrice' => $room->weekendsPrice * 1,
                'weekendsPrice2' => $room->weekendsPrice2 * 1,
                'weekends' => false,
                'full_day' => $room->full_day,
                'day_stay' => $room->day_stay,
                'bg' => 'green',
                'number' => $room->number,
                'is_instant' => 1,
                'is_default' => true,
                'textColor' => '#2791fe',
            ];
            $date['price_html'] = $date['price2'];
            if (!$is_single) {
                $date['price_html2'] = $date['price2'];
            }
            if (!$is_single) {
                $date['price_html'] = $date['price'];
            }
            $date['price_html2'] = format_money_main($date['price2']);
            $date['title'] = $date['event'] = $date['price'];
            $date['title2'] = $date['event2'] = $date['price2'];
            $date['start'] = $date['end'] = $dt->format('Y-m-d');
            $day_index = date("w", strtotime($date['start']));
            if (str_contains($hotel->weekends_days, $day_index)) {
                $date['title'] = $room->weekendsPrice * 1;
                $date['title2'] = $room->weekendsPrice2 * 1;
                $date['weekends'] = true;
            }
            $date['active'] = 1;
            $allDates[$dt->format('Y-m-d')] = $date;
        }
        if (!empty($rows)) {
            foreach ($rows as $row) {
                $row->start = date('Y-m-d', strtotime($row->start_date));
                $row->end = date('Y-m-d', strtotime($row->start_date));
                $row->textColor = '#2791fe';
                $price2 = $row->price2 * 1;
                $price = $row->price * 1;
                $weekendsPrice = $row->weekendsPrice * 1;
                $weekendsPrice2 = $row->weekendsPrice2 * 1;
                if (empty($price)) {
                    $row->price = $room->price * 1;
                }
                if (empty($price2)) {
                    $row->price2 = $room->price2 * 1;
                }
                $row->title = $row->event = $price;
                $row->title2 = $row->event2 = $price2;
                $row->full_day = $row->full_day = $room->full_day;
                $row->day_stay = $row->day_stay = $room->day_stay;
                $row->weekendsPrice = $row->weekendsPrice = $room->weekendsPrice;
                $row->weekendsPrice2 = $row->weekendsPrice2 = $room->weekendsPrice2;
                $row->bg = "darkGreen";
                if (!$is_single) {
                    $row->title = $row->event = $price;
                }
                $row->price = $price * 1;
                $row->price2 = $price2 * 1;
                $row->weekendsPrice = $weekendsPrice * 1;
                $row->weekendsPrice2 = $weekendsPrice2 * 1;
                $day_index = date("w", strtotime($row->start_date));
                if (str_contains($hotel->weekends_days, $day_index)) {
                    $row->weekends = true;
                } else {
                    $row->weekends = false;
                }
                $day_index = date("w", strtotime($row->start_date));
                if (str_contains($hotel->weekends_days, $day_index)) {
                    $row->title = $row->weekendsPrice * 1;
                    $row->title2 = $row->weekendsPrice2 * 1;
                }

                if (!$row->active) {
                    $row->title = $row->event = 'Blocked';
                    $row->title2 = $row->event = 'Blocked';
                    $row->price = $price * 1;
                    $row->price2 = $price2 * 1;
                    $row->full_day = $row->full_day = $room->full_day;
                    $row->day_stay = $row->day_stay = $room->day_stay;
                    $row->backgroundColor = '#fe2727';
                    $row->bg = 'gray';
                    $row->classNames = ['blocked-event'];
                    $row->textColor = '#fe2727';
                    $row->active = 0;

                } else {
                    $row->classNames = ['active-event'];
                    $row->active = 1;
                    $row->price = $price * 1;
                    $row->price2 = $price2 * 1;
                    if ($row->is_instant) {
                        //    $row->title = '<i class="fa fa-bolt"></i> '.$row->title;
                    }
                    $day_index = date("w", strtotime($row->start_date));
                    if (str_contains($hotel->weekends_days, $day_index)) {
                        $row->title = $row->weekendsPrice * 1;
                        $row->title2 = $row->weekendsPrice2 * 1;
                    }
                }
                $allDates[date('Y-m-d', strtotime($row->start_date))] = $row->toArray();
            }
        }
        $bookings = $room->getBookingsInRange($request->query('start'), $request->query('end'));
        if (!empty($bookings)) {
            foreach ($bookings as $booking) {
                $period = periodDate($booking->start_date, $booking->end_date, false);
                $guest = User::find($booking->create_user);
                foreach ($period as $dt) {
                    $date = $dt->format('Y-m-d');
                    if (isset($allDates[$date])) {
                        $allDates[$date]['number'] -= $booking->number;
                        $allDates[$date]['event'] = $allDates[$date]['title'] = format_money_main($allDates[$date]['price']) . ' x ' . $allDates[$date]['number'];
                        if ($allDates[$date]['number'] <= 0) {
                            $allDates[$date]['active'] = 0;
                            $allDates[$date]['event'] ='Booked';
                            $allDates[$date]['event2'] = null;
                            $allDates[$date]['price'] = 'Booked';
                            $allDates[$date]['price2'] = 'Booked';
                            $allDates[$date]['title'] = 'Booked';
                            $allDates[$date]['title2'] = 'Booked';
                            $allDates[$date]['full_day'] = $room->full_day;
                            $allDates[$date]['day_stay'] = $room->day_stay;
                            $allDates[$date]['bg'] = 'orange';
                            $allDates[$date]['booking'] = $booking->create_user;
                            $allDates[$date]['classNames'] = ['full-book-event'];
                        }
                    }
                }
            }
        }
        $data = array_values($allDates);

        return response()->json($data);
    }

    public function loadDatesGuest(Request $request, $hotel_id)
    {
        $request->validate([
            'id' => 'required',
            'start' => 'required',
            'end' => 'required',
        ]);

        // if (!$this->hasHotelPermission($hotel_id)) {
        //     return $this->sendError(__("Hotel not found"));
        // }
        /**
         * @var $room HotelRoom
         */
        $hotel = Hotel::find($hotel_id);
        $roomId = $hotel->rooms[0]->id;

        $room = $this->roomClass::find($roomId);
        if (empty($room)) {
            return $this->sendError(__('room not found'));
        }

        $is_single = $request->query('for_single');
        $query = $this->roomDateClass::query();
        $query->where('target_id', $roomId);
        $query->where('start_date', '>=', date('Y-m-d H:i:s', strtotime($request->query('start'))));
        $query->where('end_date', '<=', date('Y-m-d H:i:s', strtotime($request->query('end'))));

        $rows = $query->take(100)->get();
        $allDates = [];

        $period = periodDate($request->input('start'), $request->input('end'), false);
        foreach ($period as $dt) {
            $date = [
                'id' => rand(0, 999),
                'active' => 0,
                'price' => number_format($room->price + $room->price /100*8),
                'price2' => number_format($room->price2 + $room->price2 /100*8),
                'weekendsPrice' => number_format($room->weekendsPrice + $room->weekendsPrice /100*8),
                'weekendsPrice2' => number_format($room->weekendsPrice2 + $room->weekendsPrice2 /100*8),
                'weekends' => false,
                'full_day' => $room->full_day,
                'day_stay' => $room->day_stay,
                'bg' => 'green',
                'number' => $room->number,
                'is_instant' => 1,
                'is_default' => true,
                'textColor' => '#2791fe',
            ];
            $date['start'] = $date['end'] = $dt->format('Y-m-d');
            $day_index = date("w", strtotime($dt->format('Y-m-d')));
            if (str_contains($hotel->weekends_days, $day_index)) {
                $price = $date['weekendsPrice'];
                $price2 = $date['weekendsPrice2'];
                $date['weekends'] = true;
            } else {
                $price = $date['price'];
                $price2 = $date['price2'];
                $date['weekends'] = true;
            }
            $date['price_html'] = $date['price2'];
            if (!$is_single) {
                $date['price_html2'] = $date['price2'];
            }
            if (!$is_single) {
                $date['price_html'] = $date['price'];
            }
            $date['price_html2'] = format_money_main($date['price2']);
            $date['title'] = $date['event'] = "Day Stay " . $price . "<br />" . "Full Day " . $price2;
            $date['title2'] = $date['event2'] = $date['price2'];

            $date['active'] = 1;
            $date['classNames'] = ['active-event'];
            // $date['title'] = '<i class="fa fa-bolt"></i> ' . $date['title'];

            $allDates[$dt->format('Y-m-d')] = $date;
        }
        if (!empty($rows)) {
            foreach ($rows as $row) {
                $row->start = date('Y-m-d', strtotime($row->start_date));
                $row->end = date('Y-m-d', strtotime($row->start_date));
                $row->textColor = '#2791fe';
                $day_index = date("w", strtotime($row->start));
                if (str_contains($hotel->weekends_days, $day_index)) {
                    $price = number_format($row->weekendsPrice + $row->weekendsPrice /100*8);
                    $price2 = number_format($row->weekendsPrice2 + $row->weekendsPrice2 /100*8);
                } else {
                    $price = number_format($row->price + $row->price /100*8);
                    $price2 = number_format($row->price2 + $row->price2 /100*8);
                }
                $row->title = $row->event = "Day Stay " . $price . "<br />" . "Full Day " . $price2;
                $row->price = $price;
                if (!$row->active) {
                    if ($row->is_instant) {
                        $row->title = $row->event = 'Blocked';
                    }
                    $row->backgroundColor = '#fe2727';
                    $row->classNames = ['blocked-event'];
                    $row->textColor = '#fe2727';
                    $row->active = 0;
                } else {
                    $row->classNames = ['active-event'];
                    $row->active = 1;
                    if ($row->is_instant) {
                        // $row->title = '<i class="fa fa-bolt"></i> ' . $row->title;
                    }
                }

                $allDates[date('Y-m-d', strtotime($row->start_date))] = $row->toArray();

            }
        }
        $bookings = $room->getBookingsInRange($request->query('start'), $request->query('end'));
        if (!empty($bookings)) {
            foreach ($bookings as $booking) {
                $period = periodDate($booking->start_date, $booking->end_date, false);
                $guest = User::find($booking->create_user);
                foreach ($period as $dt) {
                    $i = $dt->getTimestamp();
                    if (isset ($allDates[date('Y-m-d', $i)])) {
                        if ($allDates[date('Y-m-d', $i)]['active'] == 0) {
                            continue;
                        }
                        $allDates[date('Y-m-d', $i)]['active'] = 0;
                        if ($booking->start_date == date('Y-m-d 00:00:00', $i)) {
                            if (empty ($allDates[date('Y-m-d', $i)]['half'])) {
                                $allDates[date('Y-m-d', $i)]['half'] = true;
                                $allDates[date('Y-m-d', $i)]['active'] = 1;
                                $allDates[date('Y-m-d', $i)]['classNames'] = ['is-half-end'];
                            } else {
                                $allDates[date('Y-m-d', $i)]['half'] = false;
                                $allDates[date('Y-m-d', $i)]['active'] = 0;
                            }
                        }
                        if ($booking->end_date == date('Y-m-d 00:00:00', $i)) {
                            if (empty ($allDates[date('Y-m-d', $i)]['half'])) {
                                $allDates[date('Y-m-d', $i)]['half'] = true;
                                $allDates[date('Y-m-d', $i)]['active'] = 1;
                                $allDates[date('Y-m-d', $i)]['classNames'] = ['is-half-start'];
                            } else {
                                $allDates[date('Y-m-d', $i)]['half'] = false;
                                $allDates[date('Y-m-d', $i)]['active'] = 0;
                            }
                        }
                        if ($allDates[date('Y-m-d', $i)]['active'] == 0) {
                            $allDates[date('Y-m-d', $i)]['event'] = __('Full Book');
                            $allDates[date('Y-m-d', $i)]['title'] = __('Full Book');
                            $allDates[date('Y-m-d', $i)]['classNames'] = ['full-book-event'];
                        }
                    }
                }
            }
        }

        if (!empty($room->ical_import_url)) {
            $startDate = $request->query('start');
            $endDate = $request->query('end');
            $timezone = setting_item('site_timezone', config('app.timezone'));

            try {
                $icalevents = new Ical($room->ical_import_url, [
                    'defaultTimeZone' => $timezone
                ]); #All ICAL companeis details Assadaldin dd($icalevents);
                // dd($endDate);
                // end day come from the filters come with -1 day so I add one day to it
                $endDate = new \DateTime($endDate . ' +1 day');
                $eventRange = $icalevents->eventsFromRange($startDate, $endDate->format('Y/m/d'));
                if (!empty($eventRange)) {
                    foreach ($eventRange as $item => $value) {
                        if (!empty($eventStart = $value->dtstart_array[2]) and !empty($eventEnd = $value->dtend_array[2])) {
                            for ($i = $eventStart; $i <= $eventEnd; $i += DAY_IN_SECONDS) {
                                if (isset($allDates[date('Y-m-d', $i)])) {
                                    $allDates[date('Y-m-d', $i)]['active'] = 0;
                                    $allDates[date('Y-m-d', $i)]['event'] = __('Booked');
                                    $allDates[date('Y-m-d', $i)]['title'] = __('Booked');
                                    $allDates[date('Y-m-d', $i)]['classNames'] = ['full-book-event'];
                                }
                            }
                        }
                    }
                }
            } catch (\Exception $exception) {
                return $this->sendError($exception->getMessage());
            }
        }

        if (!empty($room->ical_import_url_2)) {
            $startDate = $request->query('start');
            $endDate = $request->query('end');
            $timezone = setting_item('site_timezone', config('app.timezone'));

            try {
                $icalevents = new Ical($room->ical_import_url_2, [
                    'defaultTimeZone' => $timezone
                ]); #All ICAL companeis details Assadaldin dd($icalevents);
                // dd($endDate);
                // end day come from the filters come with -1 day so I add one day to it
                $endDate = new \DateTime($endDate . ' +1 day');
                $eventRange = $icalevents->eventsFromRange($startDate, $endDate->format('Y/m/d'));
                if (!empty($eventRange)) {
                    foreach ($eventRange as $item => $value) {
                        if (!empty($eventStart = $value->dtstart_array[2]) and !empty($eventEnd = $value->dtend_array[2])) {
                            for ($i = $eventStart; $i <= $eventEnd; $i += DAY_IN_SECONDS) {
                                if (isset($allDates[date('Y-m-d', $i)])) {
                                    $allDates[date('Y-m-d', $i)]['active'] = 0;
                                    $allDates[date('Y-m-d', $i)]['event'] ='Booked';
                                    $allDates[date('Y-m-d', $i)]['title'] ='Booked';
                                    $allDates[date('Y-m-d', $i)]['classNames'] = ['full-book-event'];
                                }
                            }
                        }
                    }
                }
            } catch (\Exception $exception) {
                return $this->sendError($exception->getMessage());
            }
        }

        if (!empty($room->ical_import_url_3)) {
            $startDate = $request->query('start');
            $endDate = $request->query('end');
            $timezone = setting_item('site_timezone', config('app.timezone'));

            try {
                $icalevents = new Ical($room->ical_import_url_3, [
                    'defaultTimeZone' => $timezone
                ]); #All ICAL companeis details Assadaldin dd($icalevents);
                // dd($endDate);
                // end day come from the filters come with -1 day so I add one day to it
                $endDate = new \DateTime($endDate . ' +1 day');
                $eventRange = $icalevents->eventsFromRange($startDate, $endDate->format('Y/m/d'));
                if (!empty($eventRange)) {
                    foreach ($eventRange as $item => $value) {
                        if (!empty($eventStart = $value->dtstart_array[2]) and !empty($eventEnd = $value->dtend_array[2])) {
                            for ($i = $eventStart; $i <= $eventEnd; $i += DAY_IN_SECONDS) {
                                if (isset($allDates[date('Y-m-d', $i)])) {
                                    $allDates[date('Y-m-d', $i)]['active'] = 0;
                                    $allDates[date('Y-m-d', $i)]['event'] = 'Booked';
                                    $allDates[date('Y-m-d', $i)]['title'] = 'Booked';
                                    $allDates[date('Y-m-d', $i)]['classNames'] = ['full-book-event'];
                                }
                            }
                        }
                    }
                }
            } catch (\Exception $exception) {
                return $this->sendError($exception->getMessage());
            }
        }

        if (!empty($room->ical_import_url_4)) {
            $startDate = $request->query('start');
            $endDate = $request->query('end');
            $timezone = setting_item('site_timezone', config('app.timezone'));

            try {
                $icalevents = new Ical($room->ical_import_url_4, [
                    'defaultTimeZone' => $timezone
                ]); #All ICAL companeis details Assadaldin dd($icalevents);
                // dd($endDate);
                // end day come from the filters come with -1 day so I add one day to it
                $endDate = new \DateTime($endDate . ' +1 day');
                $eventRange = $icalevents->eventsFromRange($startDate, $endDate->format('Y/m/d'));
                if (!empty($eventRange)) {
                    foreach ($eventRange as $item => $value) {
                        if (!empty($eventStart = $value->dtstart_array[2]) and !empty($eventEnd = $value->dtend_array[2])) {
                            for ($i = $eventStart; $i <= $eventEnd; $i += DAY_IN_SECONDS) {
                                if (isset($allDates[date('Y-m-d', $i)])) {
                                    $allDates[date('Y-m-d', $i)]['active'] = 0;
                                    $allDates[date('Y-m-d', $i)]['event'] = 'Booked';
                                    $allDates[date('Y-m-d', $i)]['title'] = 'Booked';
                                    $allDates[date('Y-m-d', $i)]['classNames'] = ['full-book-event'];
                                }
                            }
                        }
                    }
                }
            } catch (\Exception $exception) {
                return $this->sendError($exception->getMessage());
            }
        }

        $data = array_values($allDates);

        return response()->json($data);
    }

    public function store(Request $request, $hotel_id)
    {
        if (!$this->hasHotelPermission($hotel_id)) {
            return $this->sendError(__("Hotel not found"));
        }

        $request->validate([
            'target_id' => 'required',
            'start_date' => 'required',
            'end_date' => 'required'
        ]);

        $room = $this->roomClass::find($request->input('target_id'));
        $target_id = $request->input('target_id');

        if (empty($room)) {
            return $this->sendError(__('Room not found'));
        }

        if (!$this->hasPermission('hotel_manage_others')) {

            if ($this->currentHotel->author_id != Auth::id()) {
                return $this->sendError("You do not have permission to access it");
            }
        }

        $postData = $request->input();
        $period = periodDate($request->input('start_date'), $request->input('end_date'));
        foreach ($period as $dt) {
            $date = $this->roomDateClass::where('start_date', $dt->format('Y-m-d'))->where('target_id', $target_id)->first();

            if (empty($date)) {
                $date = new $this->roomDateClass();
                $date->target_id = $target_id;
            }

            $postData['start_date'] = $dt->format('Y-m-d H:i:s');
            $postData['end_date'] = $dt->format('Y-m-d H:i:s');

            $date->fillByAttr([
                'start_date',
                'end_date',
                'note',
                'price',
                'price2',
                'weekendsPrice',
                'weekendsPrice2',
                //                'max_guests','min_guests',
                'is_instant',
                'active',
                'number'
            ], $postData);
            // $day_index = date("w", strtotime($postData['start_date']));
            // if ($day_index == 5 || $day_index == 6) {
            //     $date->price = $postData['weekendsPrice'];
            //     $date->price2 = $postData['weekendsPrice2'];
            // }
            $date->save();
        }
        return $this->sendSuccess([], __("Update Success"));
    }
    public function avail()
    {
        return view("Hotel::admin.room.availability1");
    }
}
